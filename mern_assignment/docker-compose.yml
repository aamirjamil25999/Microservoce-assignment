version: "3.9"

services:
  redis:
    image: redis:7
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports: ["9200:9200"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200 >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports: ["5601:5601"]
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  auth-service:
    # ðŸ‘‰ set this path to where your Dockerfile actually is
    build: ./backend/auth-service
    environment:
      - NODE_ENV=production
      - PORT=4000
      - JWT_SECRET=supersecret
      - MONGO_URI=mongodb+srv://aamirjamil259999:Facebook%40123@testing.so85ftf.mongodb.net/?retryWrites=true&w=majority&appName=testing
      - CORS_ORIGIN=*
    ports: ["4000:4000"]
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  recommendation-service:
    # ðŸ‘‰ set this path correctly
    build: ./backend/recommendation-service
    environment:
      - NODE_ENV=production
      - PORT=4001
      - CORS_ORIGIN=*
    ports: ["4001:4001"]
    restart: unless-stopped

  course-service:
    # ðŸ‘‰ set this path correctly
    build: ./backend/course-service
    environment:
      - NODE_ENV=production
      - PORT=4002
      - MONGO_URI=mongodb+srv://aamirjamil259999:Facebook%40123@testing.so85ftf.mongodb.net/?retryWrites=true&w=majority&appName=testing
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
      # ðŸ‘‡ most codebases expect REDIS_URL; if yours uses HOST/PORT, keep those too
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=*
    volumes:
      - ./uploads:/app/uploads
    ports: ["4002:4002"]
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
